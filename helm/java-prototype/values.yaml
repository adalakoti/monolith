# Default values for java-prototype.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: billkoch/heptio-java-prototype
  tag: issue-34
  pullPolicy: IfNotPresent

## These are ignored when `mysql.enabled` is set to true.
mysqlHost: java-prototype-mysql-mysql
mysqlUser: "root"
mysqlPassword:
mysqlDatabase: java-prototype
mysqlPort: "3306"
flywayUrl: "jdbc:mysql://java-prototype-mysql-mysql:3306"
flywayUser: "root"
flywayPass:

javaopts: "-Xmx2048m"

# For local development, uncomment the ingress.class.  For cloud deployments, do not uncomment ingress class.

ingress:
  enabled: true
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # ertmanager.k8s.io/cluster-issuer: letsencrypt-staging
    # kubernetes.io/tls-acme: "true"
  # Base domain is the TLD of the url where the java application will resolve.  
  # This will be prefixed by the app name when deployed with helm using contour.
  basedomain: heptio.com

service:
  type: NodePort
  port: 8080

# Clusterissuer assigns the letsencrypt api object.  The staging endpoint creates the secret and certificate.  
# Changing this to the production issuer will ensure a valid, signed certificate.
clusterissuer: letsencrypt-staging

resources:
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #  cpu: 100m
  #  memory: 128Mi
  requests:
   cpu: 100m
   memory: 2048Mi

nodeSelector: {}

tolerations: []

affinity: {}

mysql:
  enabled: true
  persistence:
    enabled: false
  mysqlUser: java-prototype
  mysqlDatabase: java-prototype
# leave blank to autogenerate a password
  mysqlPassword: not-a-secure-password
